[
{
	"uri": "https://hajsong.github.io/ATM4110/linux/shell/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": " To get the most out of Linux, you should become proficient in using the shell. It might initially be more difficult than icons and menus, but once you\u0026rsquo;re used to it, the shell is quite easy to use and very powerful.\nHow to run a shell If you have Linux, running a shell is just opening Terminal or something similar to it. However, if you are running Windows (I think this is the most case), then you can experience Linux with the third-party program like MobaXterm.\nThis program offers a shell environment and (I think) you can do most of the common tasks of Linux with it.\nPlease get this (free) and set up in your computer.\nQuick start Once you install MobaXterm, go to \u0026ldquo;Session\u0026rdquo; and select \u0026ldquo;Shell\u0026rdquo;. This will open the terminal in bash shell environment.\nYou can check your shell environment by typing the follow command.\n$ echo $SHELL  This will give you /bin/bash.exe.\nTo finish a shell You can come out of the shell by exit.\n$ exit  "
},
{
	"uri": "https://hajsong.github.io/ATM4110/syllabus/",
	"title": "Syllabus",
	"tags": [],
	"description": "",
	"content": "   Week Date Content Note     1 2018-09-01\u0026ndash;2018-09-07 A short introduction to the linux operating system 개강   2 2018-09-08\u0026ndash;2018-09-14 A short introduction to the working environments 수강신청 확인 및 변경   3 2018-09-15\u0026ndash;2018-09-21 Python: Basic data and control structures I    4 2018-09-22\u0026ndash;2018-09-28 Python: Basic data and control structures II 추석연휴   5 2018-09-29\u0026ndash;2018-10-05 Python: Array operations I 수강철회, 개천절   6 2018-10-06\u0026ndash;2018-10-12 Python: Array operation II 한글날   7 2018-10-13\u0026ndash;2018-10-19 Midterm    8 2018-10-20\u0026ndash;2018-10-26 Atmospheric data structure: File input and output    9 2018-10-27\u0026ndash;2018-11-02 Visualization I : Plotting methods    10 2018-11-03\u0026ndash;2018-11-09 Visualization II : Make plots on maps    11 2018-11-10\u0026ndash;2018-11-16 Data processing I : statistical analysis    12 2018-11-17\u0026ndash;2018-11-23 Data processing II : temporal analysis    13 2018-11-24\u0026ndash;2018-11-30 Data processing III : spatial analysis    14 2018-12-01\u0026ndash;2018-12-07 Data processing IV : spectral analysis    15 2018-12-08\u0026ndash;2018-12-14 Final presentation 자율학습 및 기말시험   16 2018-12-15\u0026ndash;2018-12-21 Final exam week 자율학습 및 기말시험    "
},
{
	"uri": "https://hajsong.github.io/ATM4110/linux/diroperation/",
	"title": "Directory operation",
	"tags": ["cd", "mkdir"],
	"description": "",
	"content": " Filesystem structure Every Linux file is contained in a collection called a directory. Directories are like folders on Windows and Mac systems. Directories form a hierarchy, or tree: one directory may contain other directories, called subdirectories, which may themselves contain other files and subdirectories, and so on, into infinity. The topmost directory is called the root directory and is denoted by a slash (/).\nPath We refer to files and directories using a \u0026ldquo;names and slashes\u0026rdquo; syntax called a path. To find out the current path, try\n$ pwd  and you will get your current location in the filesystem.\nThere are two types of path. The first one is an absolute path. The absolute path starts from the root directory and has all the names of directories in the upper level. The second type is a relative path. The relative path does not start with the root directory or contain all the names of directories in the upper levels.\ncd [directory] To move your location in the shell environment, you can use the cd command:\n$ cd /one/two/three  This command line moves you from your working directory (or current location) to /one/two/three. This example uses the absolute path to go to the new working directory. From here, you can use the relative path to go to /one/two with the following command:\n$ cd ..  In the shell environment, \u0026quot;..\u0026quot; means the upper level. (\u0026quot;.\u0026quot; means the current level.) You can use \u0026quot;..\u0026quot; as many times as you want. For example, if you want to move to /one from /one/two/three, you can type:\n$ cd ../..  Please note that you can achieve the same result with the absolute path:\n$ cd /one  Each user has own home directories where users\u0026rsquo; personal files are often found. In general, the path of the home directory starts with /home. To find out the absolute path for your home directory, try:\n$ echo $HOME  Linux offers a command that brings you to your home directory from anywhere. All you can do is just type cd with no arguments. It also provides a simple way to write the absolute path of your home directory with a special character, ~. Check this out.\n$ echo ~  You will get the same result as above. This special character can be quite handy. Suppose you want to move to Documents/Public in your home directory from /one/two/three. Then you can just type:\n$ cd ~/Documents/Public  If another username follows ~, the shell expands this string to be the user\u0026rsquo;s home directory:\n$ cd ~smith $ pwd /home/smith  mkdir [options] directory mkdir creates one or more directories:\n$ mkdir dirname  rm -r dirname will delete the directory called dirname.  "
},
{
	"uri": "https://hajsong.github.io/ATM4110/linux/",
	"title": "Unix/Linux system",
	"tags": ["Unix", "Linux"],
	"description": "",
	"content": " Unix/Linux? Most computing/programming in both atmospheric and oceanic sciences happens on Unix/Linux operating system, instead of Windows. What are the advantages of using Unix/Linux? I do not have the exact answer for why, but there must be a reason for people preferring typing and executing programs instead of clicking on windows (although Linux also provides graphical user interfaces).\nThe computing/programming in the atmospheric sciences means you create/read/process/write atmospheric data. All these jobs involve the design of the workflow from you, and it is important to be powerful, efficient and flexible in doing those. Unix is particularly suited to working in such an environment and has many powerful (and flexible) commands that can help you.\nAlso, according to Biocomputing Bootcamp, \u0026ldquo;The real strength of learning Unix is that most of these commands can be combined in an almost unlimited fashion. So if you can learn just five Unix commands, you will be able to do a lot more than just five things. Our objective here is to learn a subset of Unix and to become a productive Unix user without knowing or using every program and feature.\u0026rdquo;\nI refered to Linux, pocket guide by Daniel J. Barrett in introducing Linux system.\nHistory (and family) of Unix A varied operating systems, including macOS, have branched out from Unix. Simplified history of Unix-like operating systems (Wikipedia).\nLinux is one of the operating system that stems from UNIX and naturally shares similar architecture and concepts. It is an open-source software!\nPrograming on Linux \u0026ldquo;A common feature of Unix-like systems, Linux includes traditional specific-purpose programming languages targeted at scripting, text processing and system configuration and management in general. Linux distributions support shell scripts, awk, sed and make. Many programs also have an embedded programming language to support configuring or programming themselves. For example, regular expressions are supported in programs like grep and locate, the traditional Unix MTA Sendmail contains its own Turing complete scripting system, and the advanced text editor GNU Emacs is built around a general purpose Lisp interpreter.\u0026rdquo; (From Wikipedia)\nFour major parts in Linux The kernel The low-level operation system, handling files, disks, networking and other necessities we take for granted.\nSupplied program Thousands of programs for file manipulation, text editing, mathematics, typesetting, audio, video, computer programming, website creation, encryption\u0026hellip; you name it.\nThe shell A user interface for typing commands, executing them, and displaying results. There are various shells in existence: the Bourne shell, Korn shell, C shell, and others. We will focus on bash, the Bourne Shell, which is often the default for user accounts. However, all these shells have similar basic functions.\nX A graphical system that provides windows, menus, icons, mouse support, and other familiar GUI elements. More complex graphical environments are built on X; the most popular are KDE and GNOME.\n"
},
{
	"uri": "https://hajsong.github.io/ATM4110/environment/",
	"title": "Computing Environment",
	"tags": ["python", "jupyter notebook", "anaconda"],
	"description": "",
	"content": " The main tools being used in this course is Python and Jupyter Notebook.\nWhy are we going to learn python in this course? The scope of this class is to read atmospheric and oceanic datasets, do spatial, temporal and spectral analysis, and present the data graphically. Python provides an environment for us to fulfill those tasks seamlessly without asking too much time and effort to pay. Also, learning Python may open up other possibilities in your future because it is very popular computer languages these days.\nWhy Jupyter Notebook? The Jupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and narrative text. Here is an example.\n"
},
{
	"uri": "https://hajsong.github.io/ATM4110/linux/fileoperation/",
	"title": "File Operation",
	"tags": ["ls", "cp", "rm"],
	"description": "",
	"content": " Once we arrive the working directory, the next thing we want to do might be manipulating files: copying, renaming, deleting and so forth. This page introduces a few things that can be useful in handling files in a Linux system.\nIf you need a short guide for the command, try with --help option. The content on this page mostly comes from Linux pocket guide by Daniel J. Barrett.\n ls [options] [files] The ls command lists attributes of files and directories. You can list files in the current directory:\n$ ls  in a given directories:\n$ ls dir1 dir2 dir3  or individually:\n$ ls file1 file2 file3  The most important options are -a and -l. By default, ls hides files whose names begin with a dot. The option -a displays all files including those starting with .(dot). The -l option produces a long listing, for example:\n-rw-r--r-- 1 hajsong staff 3376 Sep 3 08:18 _index.md -rw-r--r-- 1 hajsong staff 1340 Sep 3 12:53 configuration.md -rw-r--r-- 1 hajsong staff 3301 Sep 3 13:05 fileoperation.md -rw-r--r-- 1 hajsong staff 2707 Sep 3 12:52 filesystem.md -rw-r--r-- 1 hajsong staff 1066 Sep 3 11:23 shell.md  that includes, from left to right: the file\u0026rsquo;s permissions, owner, group, size, last modification date and name. When using the -l option, the list is created in the alphabetical order of the file names. It is sometimes useful to find out the most recently modified file. In this case, you can change the order according to the modification times.\n$ ls -ltr  The result looks like:\n-rw-r--r-- 1 hajsong staff 3376 Sep 3 08:18 _index.md -rw-r--r-- 1 hajsong staff 1066 Sep 3 11:23 shell.md -rw-r--r-- 1 hajsong staff 2707 Sep 3 12:52 filesystem.md -rw-r--r-- 1 hajsong staff 1340 Sep 3 12:53 configuration.md -rw-r--r-- 1 hajsong staff 3787 Sep 3 13:08 fileoperation.md  Here, -t makes the order according to the modification time, and -r reverses the order so that the latest comes to the bottom of the list. You may already notice that you can combine options by just line them up.\ncp [options] [files] (file/dir) The cp command copies a file:\n$ cp file file2  Using the -R option, you can also recursively copy directories.\n$ cp -R dir1 dir2  will create dir2 which is the same as dir1.\nUseful options\n -f: Force the copy. If a destination file exists, overwrite it unconditionally. -i: Interactive mode. Ask before overwriting destination files.  ln [options] source target A link is a reference to another file, created by the ln command. There are two kinds of links. A symbolic link refers to another file by its path, much like a Windows \u0026ldquo;shortcut\u0026rdquo; or a Mac \u0026ldquo;alias\u0026rdquo;.\n$ ln -s myfile softlink  If you delete the original file, the now-dangling link will be invalid, pointing to a nonexistent file path. A hard link, on the other hand, is simply a second name for a physical file on disk. Deleting the original file does not invalidate the link.\nIf you leave the softlink blank, then you get the link with the same name.\n$ ln myfile hardlink  Symbolic link can cross disk partitions, since they are just references to file paths. Hard links cannot. Symbolic links can also point to directories, whereas hard links cannot.\nIt is easy to find out where a symbolic link points with either of these command.\n$ readlink softlink  or\n$ ls -l softlink  useful options\n -s: Make a symbolic link. The default is a hard link. -i: Interactive mode. Ask before overwriting destination files. -f: Force the link. If a destination file exists, overwrite it unconditionally.  mv [options] source target The mv command can rename a file:\n$ mv file1 file2  or move files and directories into a destination directory.\n$ mv file1 destination_directory  useful options\n -i: Interactive mode. Ask before overwriting destination files. -f: Force the move. If a destination file exists, overwrite it unconditionally.  rm [options] files/directories The rm command can delete files:\n$ rm file1 file2 file3  or recursively delete directories:\nrm -r dir1 dir2  useful options\n -i: Interactive mode. Ask before deleting each file. -f: Force the deletion, ignoring any errors or warnings. -r: recursively remove a directory and its contents. USE WITH CAUTION, especially if combined with the -f option.  Beware! Once you delete the files or directories with rm, it is impossible or very difficult to recover them. "
},
{
	"uri": "https://hajsong.github.io/ATM4110/linux/filehandling/",
	"title": "File Handling",
	"tags": ["cat", "grep"],
	"description": "",
	"content": " 1. File viewing In Linux, you are going to handle files with lots of different types, and want to see what\u0026rsquo;s in there. On this page, we will explore how to view the file contents if they are in text in the Linux system.\ncat [options] [files] The simplest viewer is cat, which just copies its files to standard output, concatenating them.\n$ cat filename  This command dump all the contents on the screen, so large files will likely scroll off screen. If this is the case, you may consider using less command.\nuseful options\n -n: Prepend line numbers to every line  less [options] [files] Use less to view text one page at a time (or one window or screenful at a time). It\u0026rsquo;s great for text files.\nWhile running less, type h for a help message, but here are a few keystroke being used often.\n   Keystroke Meaning     h, H View a help page.   spacebar, f Move forward one screenful.   Enter Move forward one line.   b Move backward one screenful   / Enter search model. n goes to the next match, while N goes to the previous match.   q quite less.    useful options\n N: Prepend line numbers to the output.  Other useful commands head and tail are also useful in viewing files. To find out how to use them, you can refer to the manual after calling it.\n$ man head or $ man tail  The manual of these command will be printed on the screen using less command. That means that you can move around between pages using the keystrokes in the table above.\n2. File Creation and Editing Creating files is easy and can be done in many different ways in Linux. Instead of printing out the output on the screen, you can create a file containing the output by redirecting it.\n$ echo save text in the file \u0026gt; output $ ls -l \u0026gt; listdir  You can also quickly create an empty file using touch command,\n$ touch newfile  If you want to create and edit a file, you can try text editors. Two major text editors are emacs and vim in Linux, and new files can be created with the following commands.\n$ emacs newfile or $ vim newfile  There is a steep learning curve for these editors, but once you get familiar with them, you can do so many things very efficiently. Throughout the course, you need to create many text files to analyze the atmospheric data, and these text editors may boost your productivity.\nI use vim daily basis. So, I will introduce it briefly here with a few examples (There are tons of material about these text editors online. Of course, you do not have to use them.)\nvim [options] [files] You can open up the tutorial of vim withe command below.\n$ vimtutor  To exit from vimtutor, do :q.\n vim operates in two modes, insert and normal. Insert mode is for entering text in the usual manner, while normal mode is for running commands like \u0026ldquo;delete a line\u0026rdquo; or copy/paste.\nHere are basic keystrokes in normal mode.\n   Keystroke Meaning     $ vim run editor in current terminal.   i enter insert mode.   esc exit insert mode back to normal mode   :q quit vim when there is no modification   :q! quit vim without saving modification   :wq quit vim by overwriting the file with modification   :w save modification (overwrite)   :w filename save as filename   u undo   ^R redo   l or right arrow move forward   h or left arrow move backward   k or up arrow move up   j or down arrow move down   w move to next word   b move to previous word   e move to the end of the current word   0 move to beginning of line   $ move to end of line   ^f move down 1 screen   ^b move up 1 screen   gg move to beginning of buffer   G move to end of buffer i   x delete next character   X delete previous character   dd delete current line   de delete all characters to the end of the current word   dw delete all characters before the beginning of the next word   de delete all characters from the beginning of the current word   d0 delete all characters from the beginning of the current line   d$ delete all characters to the end of the current line   yy copy current line   ye copy all characters to the end of the current word   yw copy all characters before the beginning of the next word   ye copy all characters from the beginning of the current word   y0 copy all characters from the beginning of the current line   y$ copy all characters to the end of the current line   p paste   r and character replace with the character   R replace mode   o enter insert mode at the one line below   O enter insert mode at the one line up   . repeat the previous action   : switch to command mode    If you are in the intert mode, editing the text is quite similar to other programs like MS words.\n "
},
{
	"uri": "https://hajsong.github.io/ATM4110/homework/homework3/",
	"title": "Homework 3",
	"tags": ["list", "tuple"],
	"description": "",
	"content": " Take street address of Yonsei University (50 Yonsei-ro, Seodaemun-gu, Seoul 03722, Republic of Korea) and create a dictionary myaddress. Create a variable full_address that is the concatenation of all the elements of the myaddress variable by placing commas and blank spaces as needed. Using iteration, print out the full address.  "
},
{
	"uri": "https://hajsong.github.io/ATM4110/python/",
	"title": "Python",
	"tags": ["python", "jupyter notebook"],
	"description": "",
	"content": "The material here is based on the Chapter 3-5 in \u0026ldquo;A Hands-On Introduction to Using Python in the Atmospheric and Oceanic Sciences\u0026rdquo; by Johnny Wei-Bing Lin.  Python, like any other programming language, has variables and all the standard control structures. We will go though Python’s basic data and control structures that support procedural programming. Then we will explore how to use arrays, followed by file input and output.\n"
},
{
	"uri": "https://hajsong.github.io/ATM4110/homework/homework2/",
	"title": "Homework 2",
	"tags": ["vim", "homework"],
	"description": "",
	"content": "Give vim a try at least once to create/edit documents.\n Create a text file by $ ls -l \u0026gt; dirlist Add the location of the dir at the top row Delete last three rows. Copy the first row (you added in 2) and paste at the end of the row Save file  "
},
{
	"uri": "https://hajsong.github.io/ATM4110/homework/homework1/",
	"title": "Homework 1",
	"tags": ["linux"],
	"description": "",
	"content": " Setup the linux environment. Create a folder for this class at your home directory. Copy something Change its name Create a symbolic link  "
},
{
	"uri": "https://hajsong.github.io/ATM4110/homework/",
	"title": " Homework",
	"tags": ["tag1", "tag2"],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/python/pythonbasic/",
	"title": "Basic Data and Control Structures",
	"tags": ["python", "data type"],
	"description": "",
	"content": " 1. Overview of basic variables and operators Unlike languages like Fortran, Python is dynamically typed, variables take on the type of whatever they are set to when they are assigned. Thus, a=5 makes the variable a an integer, but a=5.0 makes the variable a floating point number. Additionally, because assignment can happen anytime during the program, this means you can change the type of the variable without changing the variable name.\nThe built-in variable types include:\n integer and floating point strings booleans : True and False nonetype : None lists and tuples : variable v.s. fixed dictionaries : consists of keys and values  Python is case-sensitive, so \u0026ldquo;N\u0026rdquo; and \u0026ldquo;n\u0026rdquo; are different. 2. Integer and Float The easiest way to get the idea of integer and float is probably with an example. If we define variables as the following:\na = 3.5 b = -2.1 c = 3 d = 4  Then arithmetic operations below\na*b b+c a/c c/d  give us\n# a*b -7.3500000000000005 # b+c 0.8999999999999999 # a/c 1.1666666666666667 # c/d (in Python2) 0 # c/d (in Python3) 0.75  We did not specify the data type, but Python automatically decides what type a variable based on the value/operation. For example, c/d returns integer because c and d are integers. Python will generally make the output type the type that retains the most information, so a/c returns float.\nHere’s a question: Why is the answer to a*b not exactly -7.35? Remember that floating point numbers on any binary computer are, in general, not represented exactly. The default formatting setting for the print command, will sometimes print out enough of the portion after the decimal point to show that.\n3. Strings String variables are created by setting text in either paired single or double quotes. For example,\na = 'hello' b = \u0026quot;hello\u0026quot;  both work as long as they are consistently paired.\nSome \u0026ldquo;special\u0026rdquo; strings include:\n \\n: newline character \\t: tab character \\\\: backslash  \u0026gt;\u0026gt;\u0026gt; a=\u0026quot;Hello \\nHello\u0026quot; \u0026gt;\u0026gt;\u0026gt; print(a) Hello Hello \u0026gt;\u0026gt;\u0026gt; a=\u0026quot;Hello \\tHello\u0026quot; \u0026gt;\u0026gt;\u0026gt; print(a) Hello Hello \u0026gt;\u0026gt;\u0026gt; a=\u0026quot;Hello \\\\Hello\u0026quot; \u0026gt;\u0026gt;\u0026gt; print(a) Hello \\Hello  Python uses the addition operator to join strings together.\n\u0026gt;\u0026gt;\u0026gt; a=\u0026quot;Hello\u0026quot; \u0026gt;\u0026gt;\u0026gt; b=\u0026quot; world\u0026quot; \u0026gt;\u0026gt;\u0026gt; print(a+b+'!') Hello world! \u0026gt;\u0026gt;\u0026gt; a+b 'Hello world'  4. Booleans Boolean variables are variables that can have only one of two values: True and False. In some languages, the integer value zero is considered false and the integer value one is considered true, which was the case in older versions of Python. Although this still seems to work in recent versions of Python, using True and False reduces ambiguity.\nNote the capitalization matters. \u0026gt;\u0026gt;\u0026gt; a=true Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; NameError: name 'true' is not defined \u0026gt;\u0026gt;\u0026gt; a=True  Try this in a Python interpreter:\na = True b = False print(a and b) print(a or b) print(4 \u0026gt; 5)  What did you get?\n5. NoneType A variable of NoneType can have only a single value, the value None (N has to be capitalized). Try this in a Python interpreter:\na = None print(a is None) print(a == 4)  The first print statement will return True, while the second print statement will return False. The is operator compares \u0026ldquo;equality\u0026rdquo; not in the sense of value but in the sense of memory location. Although \u0026ldquo;a == None\u0026rdquo; also works, the better syntax for comparing to None is \u0026ldquo;a is None\u0026rdquo;.\nThis NoneType variables can be useful to safely initialize a parameter. After initialize a parameter with None, you need to assign a value before doing an operation. Otherwise, Python will give an error. This is a simple way to make sure that the variable is set to a real value.\n6. Lists and tuples Lists are ordered sequences. The items in the list do not have to be of the same type. You can define a list with both numbers and strings, and even another list.\nTo define a list, you use square brackets and commas.\na = [2, 3.2, 'hello', [-1.2, 'there', 5.5]]  To access elements, you use addresses that starts with zero. For example, the first element of a is a[0], the second is a[1]. If the element of the list is also a list, you can access the element with, for example, a[3][1]. In Python, list elements can also be addressed starting from the end; thus, a[-1] is the last element in list a, a[-2] is the next to last element, etc.\n\u0026gt;\u0026gt;\u0026gt; a[3][1] 'there' \u0026gt;\u0026gt;\u0026gt; a[-1] [-1.2, 'there', 5.5] \u0026gt;\u0026gt;\u0026gt; a[-2] 'hello'  You can create new lists by slicing an existing list.\nThe lower limit of the range is inclusive, and the upper limit of the range is exclusive.\n \u0026gt;\u0026gt;\u0026gt; a[0:3] [2, 3.2, 'hello'] \u0026gt;\u0026gt;\u0026gt; a[1:3] [3.2, 'hello'] \u0026gt;\u0026gt;\u0026gt; a[2:3] ['hello'] \u0026gt;\u0026gt;\u0026gt; a[3:3] []  The length of a list can be obtained using the len function.\n\u0026gt;\u0026gt;\u0026gt; len(a) 4 \u0026gt;\u0026gt;\u0026gt; len(a[0]) Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; TypeError: object of type 'int' has no len() \u0026gt;\u0026gt;\u0026gt; len(a[3]) 3  The element can be replaced with other types of item without any issues.\n\u0026gt;\u0026gt;\u0026gt; a[2] = 0.0 \u0026gt;\u0026gt;\u0026gt; a [2, 3.2, 0.0, [-1.2, 'there', 5.5]]  Python allows you to modify the list by providing build-in functions. When a = [2, 3.2, 'hello', [-1.2, 'there', 5.5]],\n\u0026gt;\u0026gt;\u0026gt; a.insert(2,'everyone') \u0026gt;\u0026gt;\u0026gt; print(a) [2, 3.2, 'everyone', 'hello', [-1.2, 'there', 5.5]] \u0026gt;\u0026gt;\u0026gt; a.remove(2) \u0026gt;\u0026gt;\u0026gt; print(a) [3.2, 'everyone', 'hello', [-1.2, 'there', 5.5]] \u0026gt;\u0026gt;\u0026gt; print(a) [3.2, 'everyone', 'hello', [-1.2, 'there', 5.5], 4.5]  Tuples are nearly identical to lists with the exception that tuples cannot be changed! To define tuples, you use parenthesis instead of square brackets.\n\u0026gt;\u0026gt;\u0026gt; b = (3.2, 'hello') \u0026gt;\u0026gt;\u0026gt; b[0] 3.2 \u0026gt;\u0026gt;\u0026gt; b[0]=1 Traceback (most recent call last): File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 1, in \u0026lt;module\u0026gt; TypeError: 'tuple' object does not support item assignment  You can, to an extent, treat strings as lists. Thus, if a = \u0026ldquo;hello\u0026rdquo;, then a[1:3] will return the substring \u0026ldquo;el\u0026rdquo;.  If the list contains lots of elements, you can break the list after the completion of an element and continue the list on the next line. Or you can put a backslash (\u0026rdquo;\\\u0026ldquo;) at the end of a line  7. Dictionaries Dictionaries are unordered lists whose elements are referenced by keys, not by position. Keys refer to Values that can be anything.\nWhen defining a dictionary, you use curly braces (\u0026ldquo;{}\u0026rdquo;). The elements of a dictionary are \u0026ldquo;Key:Value\u0026rdquo; pairs, separated by a colon. For example,\na = {'a':2, 'b':3.2, 'c':[-1.2, 'there', 5.5]}  It is similar to lists to access the elements, except you use the keys.\n\u0026gt;\u0026gt;\u0026gt; a['a'] 2 \u0026gt;\u0026gt;\u0026gt; a['c'] [-1.2, 'there', 5.5]  There are a few built-in functions for dictionaries.\n a.keys() : show all the keys a.values() : show all the values  "
},
{
	"uri": "https://hajsong.github.io/ATM4110/environment/python/",
	"title": "Python",
	"tags": ["python"],
	"description": "",
	"content": " I refer to Unidata online python training page for this page.  I recommend you to visit Unidata Online Python Training page. The main program language we will use in this course to handle atmospheric data is python. Before getting into \u0026ldquo;What is Python?\u0026rdquo;, here is one of the statements that shows why we want to learn it\n  I have used a combination of Perl, Fortran, NCL, Matlab, R and others for routine research, but found out this general- purpose language, Python, can handle almost all in an efficient way from requesting data from remote online sites to statistics, and graphics.  What Is Python?  ## What is Python? --- #### Python is a “batteries included” computer programming language. More concretely, Python is a programming language that, in contrast to other programming languages such as C, Fortran, or Java, allows users to more readily focus and solve domain problems instead of dealing with the complexity of how a computer operates. Python achieves this goal by having the following attributes: --- #### Python is a **high-level** language. It abstracts underlying computer-related technical details. For example, Python does not make its users think too much about computer memory management or proper declaration of variables and uses safe assumptions about what the programmer is trying to convey. In addition, a high-level language can be expressed in a manner closer to English prose or mathematical equations. --- #### Python is a **general-purpose** language. It can be used for all problems that a computer is capable of rather than specializing in a specific area such as statistical analysis. For example, Python can be used for both artificial intelligence and statistical analysis. Python can be used for a variety of heterogeneous tasks within a given work-flow. --- #### Python is an **interpreted** language. Evaluation of code to obtain results can happen immediately rather than having to go through a time-consuming, compile and run cycle, which thereby speeds up the thinking and experimentation processes. IPython is an interactive form of the Python language also invented by Fernando Pérez. These environments excel for rapid-prototype of code or quick and simple experimentation with new ideas. --- #### Python has a strong tools for solving problems. A standard library and numerous third-party libraries (e.g. numpy, matplotlib,...) yield a vast array of existing codebases and examples for solving problems. --- #### Python has many, many users It allows users to quickly find solutions and example code to problems with the help of Google and Stackoverflow.       function initSlides() { Reveal.initialize({ embedded : true, controls : false, center: true ,\thistory: false , progress: false , transition: \"fade\", dependencies: [ { src: '\\/ATM4110\\/revealjs\\/lib\\/js\\/classList.js\"', condition: function() { return !document.body.classList; } }, { src: '\\/ATM4110\\/revealjs\\/plugin\\/markdown\\/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '\\/ATM4110\\/revealjs\\/plugin\\/markdown\\/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } }, { src: '\\/ATM4110\\/revealjs\\/plugin\\/highlight\\/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } }, { src: '\\/ATM4110\\/revealjs\\/plugin\\/zoom-js\\/zoom.js', async: true, condition: function() { return !!document.body.classList; } }, { src: '\\/ATM4110\\/revealjs\\/plugin\\/notes\\/notes.js', async: true, condition: function() { return !!document.body.classList; } } ] }); }   See it fullscreen var toto = document.getElementById('slideContent').innerHTML document.getElementById('slideFrame').contentWindow.document.write(document.getElementById('slideContent').innerHTML); document.getElementById('slideContent').remove(); document.addEventListener(\"DOMContentLoaded\",function(){ setTimeout(function () { document.getElementById('slideFrame').contentWindow.initSlides() ; }, 2000); }); function slideFullScreen() { document.open(); document.write(toto); document.close(); initSlides() }  These features, perhaps, come with a minor cost of reduced language performance, but this is a trade-off the vast majority of users are willing to make in order to gain all the advantages Python has to offer.\nwhat you can do with Python? Python is not just for atmospheric sciences. It has a wide area of application, and earth science is one of them. Largely, you may categorize applications into:\n Web development Data science  1. Web development Python can be used to create the webpage. We all know that webpage is basically html files (not Python). Although you can edit html files for the webpage, you can also use python to create html files for you. This is what I did to create the ATM2106 class webpage.\nSome sites wait for the input from the users and process the job before delivering the results back to users (Like Amazon). Python can play an important role in these dynamic websites. For example, one of my friends build the website called Trevii which helps you organize the trip after gathering informations online. The backbone of this website is also python!\n2. Data science In some sense, the purpose of using Python in this course is to do data science. Python is efficient when handling a large dataset. It does not necessarily faster than other programming languages like Fortran or C, as mentioned above. This is because Python has to figure out the data type while users specify it for Fortran or C. If you tell Python the data type, then it can process the data with much higher speed (approaching the speed of Fortran or C).\nHere, Data science includes machine learning! Here is an example from Towards Data Science.\nThe goal of this machine learning is to find out how to combine three numbers we provide. The first task is to generate training set.\nfrom random import randint TRAIN_SET_LIMIT = 1000 TRAIN_SET_COUNT = 100 TRAIN_INPUT = list() TRAIN_OUTPUT = list() for i in range(TRAIN_SET_COUNT): a = randint(0, TRAIN_SET_LIMIT) b = randint(0, TRAIN_SET_LIMIT) c = randint(0, TRAIN_SET_LIMIT) op = a + (2*b) + (3*c) TRAIN_INPUT.append([a, b, c]) TRAIN_OUTPUT.append(op)  The training set consists of 100 sets of three numbers, a, b, and c, and op = a + 2*b + 3*c. You can adjust the size of the training set by modifying TRAIN_SET_COUNT.\nNow, we will train the machine with this dataset. The package scikit-learn allows us to do machine learning easily.\nfrom sklearn.linear_model import LinearRegression predictor = LinearRegression() predictor.fit(X=TRAIN_INPUT, y=TRAIN_OUTPUT)  The machine learning is done, and predictor will compute op with three inputs.\nX_TEST = [[10, 20, 30]] outcome = predictor.predict(X=X_TEST) coefficients = predictor.coef_ print('Outcome : {}\\nCoefficients : {}'.format(outcome, coefficients))  We see that the coefficients from machine learning are exactly same as the one used in the training set. There are online courses from Stanford and Caltech if you are interested in learning it more.\n"
},
{
	"uri": "https://hajsong.github.io/ATM4110/python/python_more/",
	"title": "Functions, if statement and loops",
	"tags": ["do", "if", "def"],
	"description": "",
	"content": " 1. Functions Functions in Python, in theory, work both like functions and subroutines in Fortran, in that (1) input comes via arguments and (2) output occurs through: a return variable (like Fortran functions) and/or arguments (like Fortran subroutines). In practice, functions in Python are written to act like Fortran functions, with a single output returned. (The return value is specified by the return statement.) If you want multiple returns, it’s easier to put them into a list or use objects.\nFunction definitions begin with a def statement, followed by the name of the function and the argument list in parenthesis. At the end of this line comes colon. The contents of the function are written with indents (usually 4 spaces). When there is no indentation, Python assumes that the definition of the function is finished.\nFor example, the function to compute the area of the circle can be written as\ndef area(radius): area = 3.14 * (radius**2) return area  If you define this function without indentation, Python gives you an error as this.\n\u0026gt;\u0026gt;\u0026gt; def area(radius): ... area = 3.14 * (radius**2) File \u0026quot;\u0026lt;stdin\u0026gt;\u0026quot;, line 2 area = 3.14*(radius**2) ^ IndentationError: expected an indented block  Once you define the function, you can use it with the syntax in the definition.\n\u0026gt;\u0026gt;\u0026gt; a = area(3) \u0026gt;\u0026gt;\u0026gt; print(a) 28.26  Python accepts both positional and keyword arguments in the argument list of a function. Positional arguments are usually for required input while keyword arguments are usually for optional input. Typically, keyword arguments are set to some default value. If you do not want to have a default value set for the keyword, a safe practice is to just set the keyword to None.\nWe may tweak the previous area function by placing a keyword argument.\ndef area(radius, pi=None): area = pi * (radius**2) return area  What would you expect to see with a = area(3)? How about a = area(3, pi=3.14)?\nA list and dictionary variable can be useful when passing positional and keyword arguments.\nargs = [3,] kwds = {'pi':3.14} a = area(*args, **kwds)  As you can see above, a list args and kwds can be passed to the function area. This is particularly useful when the function needs many positional and keyword arguments.\nThere are some rules for passing in function arguments by lists and dictionaries:\n In the function call, put an asterisk (*) before the list that contains the positional arguments and put two asterisks (**) before the dictionary that contains the keyword arguments. The list of positional arguments is a list where each element in the list is a positional argument to be passed in, and the list is ordered in the same order as the positional arguments. The dictionary of keyword arguments uses string keys corresponding to the name of the keyword and the value of the key:value pairs as the value set to the keyword parameter.  2. Logical constructs You may be already familiar with logical constructs. In Python, the syntax for if-statements is\nif \u0026lt;condition\u0026gt;:  followed by the block of code to execute if  is true. There is no need for an \u0026ldquo;endif\u0026rdquo; line because indentation defines the contents of the if block. a = 3 if a == 3: print('I am a ', a) elif a == 2: print('I am a 2') else: print('I am not a 3 or 2')  Don’t forget the colon at the end of if, elif, and else statements 3. Looping The loop is also popular part of the programming. In Python, the loop begins with for.\nfor \u0026lt;index\u0026gt; in \u0026lt;list\u0026gt;:  Do not forget the colon at the end of the syntax.\nAs the if statement, the contents of the loop is defined with indentation. That means that the loop does not require the line with enddo or something like that.\nThe for loop is little different compared to the Fortran do loops. In Fortran, you specify a beginning value and an ending value (often 1 and an integer n) for an index, and the loop runs through all integers from that beginning value to that ending value, setting the index to that value. In Python, the loop index runs through a list of items, and the index is assigned to each item in that list, one after the other, until the list of items is exhausted. For example,\nfor i in [2, -3.3, 'hello', 1, -12]: print(i)  prints out\n2 -3.3 hello 1 -12  As mentioned in the previous page, list variables can have any variable types as elements.\nIf the iteration through numbers is desirable like Fortran, you can use a function range.\nfor i in range(5): print(i)  In Python2, range creates a list. But in Python3, it creates a range type variable.\n\u0026gt;\u0026gt;\u0026gt; a = range(3) \u0026gt;\u0026gt;\u0026gt; a range(0, 3) \u0026gt;\u0026gt;\u0026gt; list(a) [0, 1, 2]  The advantage of the range type in Python3 over the list type in Python2 is the reduced usage of the memory. In Python3, you do not need to secure memories for, for example, range(100000000).\nThe range function takes the form of range(stop) or range(start, stop[, step]).  Another useful function is enumerate. Here is an example.\na = [2, -3.3, 'hello', 1, -12] for i, v in enumerate(a): print(i, ': ', v)  results in\n0 : 2 1 : -3.3 2 : hello 3 : 1 4 : -12  You may figure out how enumerate works already. While iterating the list, enumerate assigns the index and the value to i and v, respectively.\nThe following block of the code does the same thing as above.\na = [2, -3.3, 'hello', 1, -12] for i in range(len(a)): print(i, ': ', a[i])  Python also has a while loop. It\u0026rsquo;s like any other while loop and begins with the syntax:\nwhile \u0026lt;condition\u0026gt;:  The code block (indented) that follows the while line is executed while  evaluates as True.\n"
},
{
	"uri": "https://hajsong.github.io/ATM4110/environment/jupyter/",
	"title": "Jupyter",
	"tags": ["jupyter notebook"],
	"description": "",
	"content": "The Jupyter Notebook supports over 40 different programming languages, and Python is just one of them. That means that once you know how to use the Jupyter Notebook, you can use it for other languages.\nThe Jupyter Notebook is making one of the most significant advances in the scientific computing. Here is what Nature says about the Jupyter Notebook in 2014\n  The free IPython notebook makes data analysis easier to record, understand and reproduce.  Here are a few examples of IPython Notebooks for science:\n LIGO Gravitational Wave Data Satellite Imagery Analysis 12 Steps to Navier-Stokes Computer Vision Machine Learning  "
},
{
	"uri": "https://hajsong.github.io/ATM4110/python/module/",
	"title": "Module",
	"tags": ["module"],
	"description": "",
	"content": "When you write a script, the moment may come when you think there must be functions that can do what you want to do. Python calls \u0026ldquo;modules\u0026rdquo;, and \u0026ldquo;packages\u0026rdquo; which is the collection of modules to assist users to do their job easily and quickly. (They are used interchangeably from time to time.) Unlike compiled languages like Fortran, these modules are not collections of object files but rather regular Python source code files. A module is a single source code file and a package is a directory containing source code files (and possibly subdirectories of source code files).\nTo use a module, users can call it with import command.\nimport \u0026lt;module name\u0026gt;  For example, you can call NumPy module for the computation regarding arrays.\n\u0026gt;\u0026gt;\u0026gt; import numpy \u0026gt;\u0026gt;\u0026gt; dir() ['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'numpy']  or in IPython,\nIn [1]: import numpy In [2]: whos Variable Type Data/Info ------------------------------ numpy module \u0026lt;module 'numpy' from '/Us\u0026lt;...\u0026gt;kages/numpy/__init__.py'\u0026gt;  To use functions in the NumPy module, you can first write the module name, followed by dot and the function name. For example,\na = numpy.sin(4)  assign sin(4) to a.\nCalling \u0026lt;module name\u0026gt; with import is essentially the same as running the python file \u0026lt;module name\u0026gt;.py. As an example, let\u0026rsquo;s suppose that ctof.py has\nTinC = int(input(\u0026quot;Enter a temperature in Celsius: \u0026quot;)) TinF = 9.0/5.0 * TinC + 32 print(\u0026quot;Temperature:\u0026quot;, TinC, \u0026quot;degC = \u0026quot;, TinF, \u0026quot;degF\u0026quot;)  In Python, we can run this script with the command of exec(open('ctof.py').read()).\nNow, let\u0026rsquo;s try\n\u0026gt;\u0026gt;\u0026gt; import ctof  What do you get?\nFor import numpy, however, Python loads many functions that NumPy has because it is technically a package of many files, not a module of a single file. If all the module file does is define functions, variables, etc., then nothing will be output. But you have access to everything that is defined by typing the module name, a period, then the name of the module function, variable, etc. you want (hence, numpy.sin, etc.). Just as in a regular Python session you have access to all the variables, functions, etc. you define in that regular session, with an imported module, all the variables, functions, etc. that the module created and used are also sitting inside the module\u0026rsquo;s namespace, ready for you to access, using the syntax just mentioned.\nSubmodules (which are subdirectories inside the package directory) are also specified with the periods. For instance, NumPy has a submodule called ma, which in turn has special functions defined in it. The submodule then is referred to as numpy.ma and the array function in the submodule as numpy.ma.array.\nWhen importing modules, shorter name can be assigned. For example,\nimport numpy as np  Once you assign the shorter name, you can call the function with it, e.g. np.sin.\nIf you are interested only one function in the module, you can call it as the following.\nfrom numpy import sin  Finally, remember, modules can contain data in addition to functions. The syntax to refer to those module data variables is exactly the same as for functions. Thus, numpy.pi gives the value of the mathematical constant.\nYou can create your own module and it will be explained later.\n"
},
{
	"uri": "https://hajsong.github.io/ATM4110/environment/setup/",
	"title": "Set up",
	"tags": ["tag1", "tag2"],
	"description": "",
	"content": "My recommendation of working environment is mobaxterm and python powered by anaconda. I wrote the Jupyter Notebook about how to install Python and packages here\n"
},
{
	"uri": "https://hajsong.github.io/ATM4110/environment/howtouse/",
	"title": "Start Python / Jupyter Notebook",
	"tags": ["python", "jupyter notebook"],
	"description": "",
	"content": " This page guides you how to use Python and Jupyter Notebook using the example, Celsius and Fahrenheit converter.\nWhen you want to convert the unit from Fahrenheit to Celsius, the formula is:\n\nFrom Celsius to Fahrenheit, the formula is:\n\nPython To start Python, you can type python in the terminal.\n$ python  Then you may see that the prompt has been changed as\nPython 3.6.3 |Anaconda, Inc.| (default, Oct 6 2017, 12:04:38) [GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)] on darwin Type \u0026quot;help\u0026quot;, \u0026quot;copyright\u0026quot;, \u0026quot;credits\u0026quot; or \u0026quot;license\u0026quot; for more information. \u0026gt;\u0026gt;\u0026gt;  Ask for the input in Celsius:\n\u0026gt;\u0026gt;\u0026gt; TinC = int(input(\u0026quot;Enter a temperature in Celsius: \u0026quot;))  Then you can see the next line asking a temperature in Celsius.\nEnter a temperature in Celsius:  We can say 30, although you can give any number. Then TinC carries 30. Next is to convert temperature from Celsius to Fahrenheit using the formula.\n\u0026gt;\u0026gt;\u0026gt; TinF = 9.0/5.0 * TinC + 32  It is time to print out the answer.\n\u0026gt;\u0026gt;\u0026gt; print(\u0026quot;Temperature:\u0026quot;, TinC, \u0026quot;degC = \u0026quot;, TinF, \u0026quot;degF\u0026quot;)  This should give you\nTemperature: 30 degC = 86.0 degF  Once you are done, you can exit Python by typing quit()\n\u0026gt;\u0026gt;\u0026gt; quit()  Make the unit converter from Fahrenheit to Celsius by yourself.  IPython Interactive Python (IPython) gives you more functionality by providing a wider range of commands than python. To launch IPython, simply type\n$ ipython  This will give you\nPython 3.6.3 |Anaconda, Inc.| (default, Oct 6 2017, 12:04:38) Type 'copyright', 'credits' or 'license' for more information IPython 6.1.0 -- An enhanced Interactive Python. Type '?' for help. In [1]:  Here, you can follow the same procedure as in python to have the program of the unit converter.\nIn [1]: TinC = int(input(\u0026quot;Enter a temperature in Celsius: \u0026quot;)) Enter a temperature in Celsius: 30 In [2]: TinF = 9.0/5.0 * TinC + 32 In [3]: print(\u0026quot;Temperature:\u0026quot;, TinC, \u0026quot;degC = \u0026quot;, TinF, \u0026quot;degF\u0026quot;) Temperature: 30 degC = 86.0 degF  As already mentioned above, IPython provides useful functions. For example, if you want to know about the command input, you can type\nIn [4]: input?  If you want to know what variables are defined, type\nIn [5]: whos Variable Type Data/Info ----------------------------- TinC int 30 TinF float 86.0  IPython also provides many magic functions. The built-in magics include:\n Functions that work with code: %run, %edit, %save, %macro, %recall, etc. Functions which affect the shell: %colors, %xmode, %autoindent, %automagic, etc. Other functions such as %reset, %timeit, %%writefile, %load, or %paste.  You can always call them using the % prefix, and if you’re calling a line magic on a line by itself, you can omit %. For more information about built-in magic commands, please refer to IPython webpage\nTo exit IPython, you can do either quit or exit.\nPython script If the job requires more than a few lines of python codes, then typing commands can be overwhelming. Also, it is likely that you make mistakes. In this case, writing all python commands in a python script and running this script to get the result is the way to go.\nThe first thing to do is create a python script file using text editors. If you use vim, you can easily create a file by typing vim filename.py.\n$ vim ctof.py  Then write all python codes there.\n# This script converts temperature in Celsius to temperature in Fahrenheit. # # 2018.9.13 TinC = int(input(\u0026quot;Enter a temperature in Celsius: \u0026quot;)) TinF = 9.0/5.0 * TinC + 32 print(\u0026quot;Temperature:\u0026quot;, TinC, \u0026quot;degC = \u0026quot;, TinF, \u0026quot;degF\u0026quot;)  In this example, the first three lines start with #. Whenever a line starts with #, python just skips it. So it is useful to add an explanation of your code in the script file.\nYou can execute this script in a few different ways.\n1. In Python After launching python, you can execute your python script as follows.\n\u0026gt;\u0026gt;\u0026gt; exec(open('ctof.py').read())  If you input temperature in Celsius when it asks temperature, you can get the result.\nEnter a temperature in Celsius: 30 Temperature: 30 degC = 86.0 degF  If you think that this is not a really convenient way to run the program, there are alternative ways.\n2. In IPython Running a python script in IPython is much easier than in Python. After launching IPython with ipython, you can just type\nIn [1]: %run ctof.py  to get the same result as in python. You can even drop the file extension.\nIn [2]: %run ctof  even just run ctof.py or run ctof will do the job!\nAnother way to run the script, copy whole lines and paste them in IPython. To paste copied lines in IPython, you can use a magic function %paste.\nIn [3]: %paste  Then IPython shows the copied lines below. This is particularly useful if you need to run a few lines of your python script.\nIPython allows you to open the text file with an exclamation mark (!) while you are in IPython.\nIn [5]: !vim ctof.py  This makes %paste really useful because you can open your script and get the necessary lines without leaving IPython.\n3. Using Python in the terminal You do not launch python to execute python scripts. In the terminal, you can run your script by\n$ python ctof.py  4. As stand-alone in the terminal If your script starts with\n#!/usr/bin/env python3  you can run this script without typing python in the terminal. When you save the script, make sure to change file modes to be executable.\n$ chmod 755 ctof.py  To run this executable file,\n$ ./ctof.py  Jupyter Notebook You can use Jupyter Notebook for running python commands or a script. First, launch Jupyter Notebook.\n$ jupyter notebook  Then you get to have a new window in your web browser showing the file system in the working directory. To start python, click new in the upper right corner and select Python 3. This will open a new tab that just looks like IPython.\nJupyter Notebook consists of cells. It is your choice how to compose the cell with your commands. You can add all the lines in one cell, or a simple line for each cell.\nLet\u0026rsquo;s first copy all the lines in a single cell. Jupyter Notebook provides a help page, and it says that you can hit control key and enter key together to run the cell. When you run the cell, you are asked to give temperature in Celsius as before.\nIf we decide to use cells for each line, you will be asked to give temperature after run the cell with TinC = int(input(\u0026quot;Enter a temperature in Celsius: \u0026quot;)).\nOnce you are done, you can save the Jupyter Notebook file in the web browser.\nTo finish Jupyter Notebook, you can come back to the terminal where you typed jupyter notebook and hit ^C TWICE!\nIn the class, we can explore what Jupyter Notebook offers extensively.\nLaunch Jupyter Notebook remotely In some cases, you need to use a remote server for Jupyter Notebook. In the remote server,\n$ jupyter notebook --no-browser --port=8889  This launches Jupyter Notebook without opening web browser. Then on your local machine,\n$ ssh -N -f -L localhost:8899:localhost:8889 [accountname]@[servername]  and open the browser and go to http://localhost:8899 The web browser ask for the key, and you can find it in the terminal where you launch Jupyter Notebook.\n"
},
{
	"uri": "https://hajsong.github.io/ATM4110/",
	"title": "Programming in Meteorology",
	"tags": [],
	"description": "",
	"content": " Programming in Meteorology This webpage is designed to serve the students enrolled for ATM4110, Programming in Meteorology.\nThis course will provide the programming foundation to perform the analysis and diagnostics of the big dataset in the atmospheric sciences. Upon the completion of this course, the students will be capable of analyzing the atmospheric data and extracting meaningful information from it.\nThis webpage is not in the final version but keeps evolving. I encourage students to visit this page frequently and be up to date.  \nObjective of this course  Introduce the programming environment for meteorology Handle the atmospheric data using programming language such as python Learn temporal/spatial/spectral analysis skills Solve problems using acquired skills in programming and produce meaningful results  A few examples that you can do after this course  Draw figures using atmospheric data on the map (source):  Post-process the data and plot the results (source):  Deal with global data for the climate-related research (Figure from the 5th IPCC report)   Instructor  Hajoon Song Office : Science Hall 544 Email : hajsong@yonsei.ac.kr Telephone : 02-2123-2579  Class  Tuesday 12-2 in Science Hall 523 Thursday 12-2 in Science Hall 603  Office hour  Tuesday 2-3 in Science Hall 544  Grading  Homework : 30% Midterm : 20% Final project : 40% Attendance and participation : 10%  Textbook When we go through python, I will follow the book, A Hands-On Introduction to Using Python in the Atmospheric and Oceanic Sciences (online version) If you have an issue with Python, you may find this online material be helpful.\nThe repository for the Jupyter Notebook files. I will upload the Jupyter Notebook files at Azure Notebooks\n"
},
{
	"uri": "https://hajsong.github.io/ATM4110/tags/anaconda/",
	"title": "Anaconda",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/tags/cat/",
	"title": "Cat",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/tags/cd/",
	"title": "Cd",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/tags/cp/",
	"title": "Cp",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/tags/data-type/",
	"title": "Data Type",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/tags/def/",
	"title": "Def",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/tags/do/",
	"title": "Do",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/tags/grep/",
	"title": "Grep",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/tags/homework/",
	"title": "Homework",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/tags/if/",
	"title": "If",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/tags/jupyter-notebook/",
	"title": "Jupyter Notebook",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/tags/linux/",
	"title": "Linux",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/tags/list/",
	"title": "List",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/tags/ls/",
	"title": "Ls",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/tags/mkdir/",
	"title": "Mkdir",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/tags/module/",
	"title": "Module",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/tags/python/",
	"title": "Python",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/tags/rm/",
	"title": "Rm",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/tags/tag1/",
	"title": "Tag1",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/tags/tag2/",
	"title": "Tag2",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/tags/tuple/",
	"title": "Tuple",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/tags/unix/",
	"title": "Unix",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://hajsong.github.io/ATM4110/tags/vim/",
	"title": "Vim",
	"tags": [],
	"description": "",
	"content": ""
}]