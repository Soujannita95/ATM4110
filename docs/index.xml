<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming in Meteorology on ATM4110</title>
    <link>https://hajsong.github.io/ATM4110/</link>
    <description>Recent content in Programming in Meteorology on ATM4110</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Sep 2018 07:45:45 +0900</lastBuildDate>
    
	<atom:link href="https://hajsong.github.io/ATM4110/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Installation</title>
      <link>https://hajsong.github.io/ATM4110/linux/shell/</link>
      <pubDate>Tue, 04 Sep 2018 07:45:45 +0900</pubDate>
      
      <guid>https://hajsong.github.io/ATM4110/linux/shell/</guid>
      <description>To get the most out of Linux, you should become proficient in using the shell. It might initially be more difficult than icons and menus, but once you&amp;rsquo;re used to it, the shell is quite easy to use and very powerful.
How to run a shell If you have Linux, running a shell is just opening Terminal or something similar to it. However, if you are running Windows (I think this is the most case), then you can experience Linux with the third-party program like MobaXterm.</description>
    </item>
    
    <item>
      <title>Directory operation</title>
      <link>https://hajsong.github.io/ATM4110/linux/diroperation/</link>
      <pubDate>Tue, 04 Sep 2018 07:45:45 +0900</pubDate>
      
      <guid>https://hajsong.github.io/ATM4110/linux/diroperation/</guid>
      <description>Filesystem structure Every Linux file is contained in a collection called a directory. Directories are like folders on Windows and Mac systems. Directories form a hierarchy, or tree: one directory may contain other directories, called subdirectories, which may themselves contain other files and subdirectories, and so on, into infinity. The topmost directory is called the root directory and is denoted by a slash (/).
Path We refer to files and directories using a &amp;ldquo;names and slashes&amp;rdquo; syntax called a path.</description>
    </item>
    
    <item>
      <title>File Operation</title>
      <link>https://hajsong.github.io/ATM4110/linux/fileoperation/</link>
      <pubDate>Tue, 04 Sep 2018 07:45:45 +0900</pubDate>
      
      <guid>https://hajsong.github.io/ATM4110/linux/fileoperation/</guid>
      <description>Once we arrive the working directory, the next thing we want to do might be manipulating files: copying, renaming, deleting and so forth. This page introduces a few things that can be useful in handling files in a Linux system.
If you need a short guide for the command, try with --help option. The content on this page mostly comes from Linux pocket guide by Daniel J. Barrett.
 ls [options] [files] The ls command lists attributes of files and directories.</description>
    </item>
    
    <item>
      <title>File Handling</title>
      <link>https://hajsong.github.io/ATM4110/linux/filehandling/</link>
      <pubDate>Wed, 05 Sep 2018 16:06:36 +0900</pubDate>
      
      <guid>https://hajsong.github.io/ATM4110/linux/filehandling/</guid>
      <description>1. File viewing In Linux, you are going to handle files with lots of different types, and want to see what&amp;rsquo;s in there. On this page, we will explore how to view the file contents if they are in text in the Linux system.
cat [options] [files] The simplest viewer is cat, which just copies its files to standard output, concatenating them.
$ cat filename  This command dump all the contents on the screen, so large files will likely scroll off screen.</description>
    </item>
    
    <item>
      <title>Homework 3</title>
      <link>https://hajsong.github.io/ATM4110/homework/homework3/</link>
      <pubDate>Mon, 17 Sep 2018 12:38:31 +0900</pubDate>
      
      <guid>https://hajsong.github.io/ATM4110/homework/homework3/</guid>
      <description> Take street address of Yonsei University (50 Yonsei-ro, Seodaemun-gu, Seoul 03722, Republic of Korea) and create a dictionary myaddress. Create a variable full_address that is the concatenation of all the elements of the myaddress variable by placing commas and blank spaces as needed. Using iteration, print out the full address.  </description>
    </item>
    
    <item>
      <title>Homework 2</title>
      <link>https://hajsong.github.io/ATM4110/homework/homework2/</link>
      <pubDate>Thu, 06 Sep 2018 08:54:36 +0900</pubDate>
      
      <guid>https://hajsong.github.io/ATM4110/homework/homework2/</guid>
      <description>Give vim a try at least once to create/edit documents.
 Create a text file by $ ls -l &amp;gt; dirlist Add the location of the dir at the top row Delete last three rows. Copy the first row (you added in 2) and paste at the end of the row Save file  </description>
    </item>
    
    <item>
      <title>Homework 1</title>
      <link>https://hajsong.github.io/ATM4110/homework/homework1/</link>
      <pubDate>Tue, 04 Sep 2018 07:51:27 +0900</pubDate>
      
      <guid>https://hajsong.github.io/ATM4110/homework/homework1/</guid>
      <description> Setup the linux environment. Create a folder for this class at your home directory. Copy something Change its name Create a symbolic link  </description>
    </item>
    
    <item>
      <title>Basic Data and Control Structures</title>
      <link>https://hajsong.github.io/ATM4110/python/pythonbasic/</link>
      <pubDate>Mon, 17 Sep 2018 10:08:38 +0900</pubDate>
      
      <guid>https://hajsong.github.io/ATM4110/python/pythonbasic/</guid>
      <description>1. Overview of basic variables and operators Unlike languages like Fortran, Python is dynamically typed, variables take on the type of whatever they are set to when they are assigned. Thus, a=5 makes the variable a an integer, but a=5.0 makes the variable a floating point number. Additionally, because assignment can happen anytime during the program, this means you can change the type of the variable without changing the variable name.</description>
    </item>
    
    <item>
      <title>Python</title>
      <link>https://hajsong.github.io/ATM4110/environment/python/</link>
      <pubDate>Fri, 07 Sep 2018 12:36:51 +0900</pubDate>
      
      <guid>https://hajsong.github.io/ATM4110/environment/python/</guid>
      <description>I refer to Unidata online python training page for this page.  I recommend you to visit Unidata Online Python Training page. The main program language we will use in this course to handle atmospheric data is python. Before getting into &amp;ldquo;What is Python?&amp;rdquo;, here is one of the statements that shows why we want to learn it
  I have used a combination of Perl, Fortran, NCL, Matlab, R and others for routine research, but found out this general- purpose language, Python, can handle almost all in an efficient way from requesting data from remote online sites to statistics, and graphics.</description>
    </item>
    
    <item>
      <title>Functions, if statement and loops</title>
      <link>https://hajsong.github.io/ATM4110/python/python_more/</link>
      <pubDate>Mon, 17 Sep 2018 13:34:26 +0900</pubDate>
      
      <guid>https://hajsong.github.io/ATM4110/python/python_more/</guid>
      <description>1. Functions Functions in Python, in theory, work both like functions and subroutines in Fortran, in that (1) input comes via arguments and (2) output occurs through: a return variable (like Fortran functions) and/or arguments (like Fortran subroutines). In practice, functions in Python are written to act like Fortran functions, with a single output returned. (The return value is specified by the return statement.) If you want multiple returns, itâ€™s easier to put them into a list or use objects.</description>
    </item>
    
    <item>
      <title>Jupyter</title>
      <link>https://hajsong.github.io/ATM4110/environment/jupyter/</link>
      <pubDate>Fri, 07 Sep 2018 12:36:51 +0900</pubDate>
      
      <guid>https://hajsong.github.io/ATM4110/environment/jupyter/</guid>
      <description>The Jupyter Notebook supports over 40 different programming languages, and Python is just one of them. That means that once you know how to use the Jupyter Notebook, you can use it for other languages.
The Jupyter Notebook is making one of the most significant advances in the scientific computing. Here is what Nature says about the Jupyter Notebook in 2014
  The free IPython notebook makes data analysis easier to record, understand and reproduce.</description>
    </item>
    
    <item>
      <title>Module</title>
      <link>https://hajsong.github.io/ATM4110/python/module/</link>
      <pubDate>Tue, 18 Sep 2018 08:45:40 +0900</pubDate>
      
      <guid>https://hajsong.github.io/ATM4110/python/module/</guid>
      <description>When you write a script, the moment may come when you think there must be functions that can do what you want to do. Python calls &amp;ldquo;modules&amp;rdquo;, and &amp;ldquo;packages&amp;rdquo; which is the collection of modules to assist users to do their job easily and quickly. (They are used interchangeably from time to time.) Unlike compiled languages like Fortran, these modules are not collections of object files but rather regular Python source code files.</description>
    </item>
    
    <item>
      <title>Set up</title>
      <link>https://hajsong.github.io/ATM4110/environment/setup/</link>
      <pubDate>Tue, 11 Sep 2018 11:14:41 +0900</pubDate>
      
      <guid>https://hajsong.github.io/ATM4110/environment/setup/</guid>
      <description>My recommendation of working environment is mobaxterm and python powered by anaconda. I wrote the Jupyter Notebook about how to install Python and packages here</description>
    </item>
    
    <item>
      <title>Introduction to Object</title>
      <link>https://hajsong.github.io/ATM4110/python/object/</link>
      <pubDate>Wed, 19 Sep 2018 09:59:47 +0900</pubDate>
      
      <guid>https://hajsong.github.io/ATM4110/python/object/</guid>
      <description>Python is an object oriented programming language. In fact, almost everything in Python is an object. Then what is an object?
An object is a variable that has attached to it both data (attributes) and functions designed to act on that data (methods). So what does this mean?
The key idea of objects is that variables shouldn&amp;rsquo;t be thought of as having only values (and type), but rather they should be thought of entities that can have any number of other things &amp;ldquo;attached&amp;rdquo; to them.</description>
    </item>
    
    <item>
      <title>Defining class</title>
      <link>https://hajsong.github.io/ATM4110/python/myclass/</link>
      <pubDate>Thu, 20 Sep 2018 17:35:05 +0900</pubDate>
      
      <guid>https://hajsong.github.io/ATM4110/python/myclass/</guid>
      <description>&amp;ldquo;Classes provide a means of bundling data and functionality together.&amp;rdquo; (from the Python documentation)
We can define our own type of object by creating a new class that can carry attributes and methods to maintaining and modifying its state.
When we define a new variable, we actually create a new instance of a class. For example, typing a = &#39;hello&#39; creates an instance of a predefined string class. Likewise, we can create a new class instance that has the format of the class we defined.</description>
    </item>
    
    <item>
      <title>Start Python / Jupyter Notebook</title>
      <link>https://hajsong.github.io/ATM4110/environment/howtouse/</link>
      <pubDate>Thu, 13 Sep 2018 07:57:43 +0900</pubDate>
      
      <guid>https://hajsong.github.io/ATM4110/environment/howtouse/</guid>
      <description>This page guides you how to use Python and Jupyter Notebook using the example, Celsius and Fahrenheit converter.
When you want to convert the unit from Fahrenheit to Celsius, the formula is:

From Celsius to Fahrenheit, the formula is:

Python To start Python, you can type python in the terminal.
$ python  Then you may see that the prompt has been changed as
Python 3.6.3 |Anaconda, Inc.</description>
    </item>
    
  </channel>
</rss>